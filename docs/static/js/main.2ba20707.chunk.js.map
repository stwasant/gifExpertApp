{"version":3,"sources":["components/AddCategory.js","helpers/getGits.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","catg","type","value","onChange","target","getGifs","category","a","url","encodeURI","console","log","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OACE,6BACE,0BAAMC,SAZW,SAACC,GAEpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAOd,4CACA,2BAAQO,KAAK,OACLC,MAAOT,EACPU,SApBY,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,a,uBCTlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,sDAGnBI,QAAQC,IAAKH,GAHM,SAIAI,MAAMJ,GAJN,cAIbK,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAXnB,kBAgBXQ,GAhBW,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACvC,OACE,yBAAKgB,UAAU,iDACb,2BAAIJ,GACJ,yBAAKK,IAAKjB,EAAKkB,IAAKN,MCDbO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAoB1C,OAbAC,qBAAU,WACR1B,EAAQC,GACP0B,MAAK,SAACd,GAEHY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAId,CAACtB,IAGGuB,EDb4BI,CAAc3B,GAAlCe,EALwB,EAK7BN,KAAaa,EALgB,EAKhBA,QAgBvB,OACE,kBAAC,WAAD,KACE,4BAAKtB,GAGHsB,GAAW,wCACb,yBAAKJ,UAAU,WACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEFzBiB,EA5BM,WAAO,IAAD,EACW3C,mBAAS,CAAC,cADrB,mBAClB4C,EADkB,KACN7C,EADM,KAQzB,OACE,6BACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGA,4BACG6C,EAAWnB,KAAI,SAACX,GAAD,OACd,kBAAC,EAAD,CACA4B,IAAM5B,EACNA,SAAUA,WCnBtB+B,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.2ba20707.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n};\r\n\r\n  const handleSubmit = (event) => {\r\n    // con esto evitamos el refresh del componente form\r\n    event.preventDefault();\r\n    \r\n    if (inputValue.trim().length > 2) {\r\n        setCategories(catg => [inputValue,...catg]);\r\n        setInputValue('');\r\n    }\r\n\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={ handleSubmit }>\r\n        <h2>Add Category</h2>\r\n        <input  type='text' \r\n                value={inputValue} \r\n                onChange={handleInputChange} \r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// De esta manera se pueden definir los tipos y si es requerido las properties del componente\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n  };\r\n  ","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&api_key=RMAFkLZHOUiCTiixCgrOB05hD7o1RWra&limit=10`;\r\n    \r\n    console.log (url);\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    // console.log(gifs);\r\n    return (gifs);\r\n  };\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"gifgriditem animate__animated animate__rollIn\">\r\n      <p>{title}</p>\r\n      <img src={url} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n","import React, {Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGits';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const state = useFetchGifs();\r\n    // El useFetchGifs es un custom Hooks creado\r\n    // console.log(category);\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // console.log(loading);\r\n\r\n  // Con el useState controlabamos los estados.\r\n//   const [images, setImages] = useState([]);\r\n\r\n  // con el useEffect permite controlar que una parte del codigo se renderice una vez.\r\n//   useEffect(() => {\r\n//     // como getGifs es un helper asincrono , se trata como un call back se puede tratar con el .then\r\n//     getGifs( category )\r\n//     .then( img => setImages( img )); \r\n//   }, [ category ]);\r\n\r\n \r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>{category}</h3>\r\n\r\n      {/* { loading ? 'Data cargando..' : 'Cargada finalizada'} */}\r\n      { loading && <p>Loading..</p>}\r\n      <div className='gifgrid'>\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGits';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n//   console.log (' category hooks ' + category);\r\n  useEffect(() => {\r\n    getGifs(category)\r\n    .then((img) => {\r\n     \r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n        });\r\n     \r\n    });\r\n  }, [category]);\r\n\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // para Agregar a la lista\r\n  //   const handleadd = () => {\r\n  //     // setCategories(['XMAN',...categories]);\r\n  //     setCategories(catg => ['XMAN',...catg]);\r\n  //   };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <hr />\r\n        {/* <button onClick={handleadd}>Agregar</button> */}\r\n\r\n        <ol>\r\n          {categories.map((category) => (\r\n            <GifGrid \r\n            key= {category}\r\n            category={category} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n import GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}